import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

df = pd.read_csv('WordCount_Sheet3.csv')

print(f"Successfully loaded CSV with {len(df)} rows and {len(df.columns)} columns")
print(f"Columns found: {list(df.columns)}")

llm_column_names = ['o3', 'Opus 4', 'Gemini 2.5 Pro', 'o4-mini', 
                    'Sonnet 4', 'Gemini 2.5 Flash', 'OpenEvidence']

means = []
ci_lower = []
ci_upper = []
std_errors = []

for llm in llm_column_names:
    if llm in df.columns:
        values = df[llm].dropna()
        mean = values.mean()
        means.append(mean)
        
        n = len(values)
        std = values.std(ddof=1)
        se = std / np.sqrt(n)
        std_errors.append(se)
        
        confidence = 0.95
        t_value = stats.t.ppf((1 + confidence) / 2, n - 1)
        margin_error = t_value * se
        
        ci_lower.append(mean - margin_error)
        ci_upper.append(mean + margin_error)
    else:
        print(f"Warning: Column '{llm}' not found in dataframe")
        means.append(0)
        ci_lower.append(0)
        ci_upper.append(0)
        std_errors.append(0)

if len(means) == 0 or all(m == 0 for m in means):
    print("Error: No data found for any LLM")
    exit()

errors = np.array(means) - np.array(ci_lower)

fig, ax = plt.subplots(figsize=(12, 8))

x_positions = np.arange(len(llm_column_names))
bar_width = 0.6

bar_colors = ['#084594', '#2171b5', '#4292c6', '#6baed6', 
              '#9ecae1', '#c6dbef', '#deebf7']

bars = ax.bar(x_positions, means, bar_width,
              yerr=errors,
              capsize=5,
              color=bar_colors,
              edgecolor='black',
              linewidth=1,
              error_kw={'linewidth': 1.5, 'ecolor': 'black'})

ax.set_xlabel('LLM Model', fontsize=12, fontweight='bold')
ax.set_ylabel('Average Number of Words', fontsize=12, fontweight='bold')
ax.set_title('LLM Word Counts with 95% Confidence Intervals', fontsize=14, fontweight='bold')

formatted_labels = ['O3', 'Opus 4', 'Gemini 2.5 Pro', 'O4-mini', 
                   'Sonnet 4', 'Gemini 2.5 Flash', 'OpenEvidence']
ax.set_xticks(x_positions)
ax.set_xticklabels(formatted_labels, rotation=45, ha='right')

if max(ci_upper) > 0:
    ax.set_ylim(0, max(ci_upper) * 1.1)
else:
    ax.set_ylim(0, 200)  # Default if no data

ax.grid(axis='y', alpha=0.3, linestyle='--')
ax.set_axisbelow(True)

for i, bar in enumerate(bars):
    if means[i] > 0:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., 
                height + errors[i] + 2,
                f'{means[i]:.1f}',
                ha='center', va='bottom', 
                fontsize=10, fontweight='bold')

textstr = 'Error bars represent 95% CI'
props = dict(boxstyle='round', facecolor='white', 
             alpha=0.8, edgecolor='gray')
ax.text(0.02, 0.98, textstr, transform=ax.transAxes, 
        fontsize=10, verticalalignment='top', bbox=props)

plt.tight_layout()

plt.show()
